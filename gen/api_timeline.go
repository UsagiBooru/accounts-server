/*
 * UsagiBooru Accounts API
 *
 * Accounts related api (required)
 *
 * API version: 2.0
 * Contact: dsgamer777@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package gen

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A TimelineApiController binds http requests to an api service and writes the service results to the http response
type TimelineApiController struct {
	service TimelineApiServicer
}

// NewTimelineApiController creates a default api controller
func NewTimelineApiController(s TimelineApiServicer) Router {
	return &TimelineApiController{ service: s }
}

// Routes returns all of the api route for the TimelineApiController
func (c *TimelineApiController) Routes() Routes {
	return Routes{ 
		{
			"FollowArtist",
			strings.ToUpper("Post"),
			"/accounts/{accountID}/timeline/follow",
			c.FollowArtist,
		},
		{
			"GetFollowingArtists",
			strings.ToUpper("Get"),
			"/accounts/{accountID}/timeline",
			c.GetFollowingArtists,
		},
		{
			"UnfollowArtist",
			strings.ToUpper("Post"),
			"/accounts/{accountID}/timeline/unfollow",
			c.UnfollowArtist,
		},
	}
}

// FollowArtist - Follow artist
func (c *TimelineApiController) FollowArtist(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	lightArtistStruct := &LightArtistStruct{}
	if err := json.NewDecoder(r.Body).Decode(&lightArtistStruct); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.FollowArtist(r.Context(), accountID, *lightArtistStruct)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetFollowingArtists - Get timeline followings
func (c *TimelineApiController) GetFollowingArtists(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	sort := query.Get("sort")
	order := query.Get("order")
	page, err := parseInt32Parameter(query.Get("page"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.GetFollowingArtists(r.Context(), accountID, sort, order, page)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// UnfollowArtist - Unfollow artist
func (c *TimelineApiController) UnfollowArtist(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	lightArtistStruct := &LightArtistStruct{}
	if err := json.NewDecoder(r.Body).Decode(&lightArtistStruct); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.UnfollowArtist(r.Context(), accountID, *lightArtistStruct)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
