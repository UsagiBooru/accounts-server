/*
 * UsagiBooru Accounts API
 *
 * アカウント関連API
 *
 * API version: 2.0
 * Contact: dsgamer777@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A MutesApiController binds http requests to an api service and writes the service results to the http response
type MutesApiController struct {
	service MutesApiServicer
}

// NewMutesApiController creates a default api controller
func NewMutesApiController(s MutesApiServicer) Router {
	return &MutesApiController{ service: s }
}

// Routes returns all of the api route for the MutesApiController
func (c *MutesApiController) Routes() Routes {
	return Routes{ 
		{
			"GetMute",
			strings.ToUpper("Get"),
			"/accounts/{accountID}/mutes/{muteID}",
			c.GetMute,
		},
		{
			"GetMutes",
			strings.ToUpper("Get"),
			"/accounts/{accountID}/mutes",
			c.GetMutes,
		},
	}
}

// GetMute - Get mute
func (c *MutesApiController) GetMute(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	muteID, err := parseInt32Parameter(params["muteID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.GetMute(r.Context(), accountID, muteID)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetMutes - Get mute list
func (c *MutesApiController) GetMutes(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.GetMutes(r.Context(), accountID)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
