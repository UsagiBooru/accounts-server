/*
 * UsagiBooru Accounts API
 *
 * アカウント関連API
 *
 * API version: 2.0
 * Contact: dsgamer777@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package gen

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A NotifyApiController binds http requests to an api service and writes the service results to the http response
type NotifyApiController struct {
	service NotifyApiServicer
}

// NewNotifyApiController creates a default api controller
func NewNotifyApiController(s NotifyApiServicer) Router {
	return &NotifyApiController{ service: s }
}

// Routes returns all of the api route for the NotifyApiController
func (c *NotifyApiController) Routes() Routes {
	return Routes{ 
		{
			"AddLineNotifyClient",
			strings.ToUpper("Post"),
			"/accounts/{accountID}/notify/clients/line",
			c.AddLineNotifyClient,
		},
		{
			"AddWebNotifyClient",
			strings.ToUpper("Post"),
			"/accounts/{accountID}/notify/clients/web",
			c.AddWebNotifyClient,
		},
		{
			"DeleteNotifyClient",
			strings.ToUpper("Delete"),
			"/accounts/{accountID}/notify/clients/{notifyClientID}",
			c.DeleteNotifyClient,
		},
		{
			"DeleteNotifyCondition",
			strings.ToUpper("Delete"),
			"/accounts/{accountID}/notify/conditions/{conditionID}",
			c.DeleteNotifyCondition,
		},
		{
			"EditNotifyClient",
			strings.ToUpper("Patch"),
			"/accounts/{accountID}/notify/clients/{notifyClientID}",
			c.EditNotifyClient,
		},
		{
			"EditNotifyCondition",
			strings.ToUpper("Patch"),
			"/accounts/{accountID}/notify/conditions/{conditionID}",
			c.EditNotifyCondition,
		},
		{
			"GetNotifyClient",
			strings.ToUpper("Get"),
			"/accounts/{accountID}/notify/clients/{notifyClientID}",
			c.GetNotifyClient,
		},
		{
			"GetNotifyClients",
			strings.ToUpper("Get"),
			"/accounts/{accountID}/notify/clients",
			c.GetNotifyClients,
		},
		{
			"GetNotifyCondition",
			strings.ToUpper("Get"),
			"/accounts/{accountID}/notify/conditions/{conditionID}",
			c.GetNotifyCondition,
		},
		{
			"GetNotifyConditions",
			strings.ToUpper("Get"),
			"/accounts/{accountID}/notify/conditions",
			c.GetNotifyConditions,
		},
		{
			"RegisterNotifyCondition",
			strings.ToUpper("Post"),
			"/accounts/{accountID}/notify/conditions",
			c.RegisterNotifyCondition,
		},
	}
}

// AddLineNotifyClient - Create line notify client
func (c *NotifyApiController) AddLineNotifyClient(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	postRegisterLineNotifyRequest := &PostRegisterLineNotifyRequest{}
	if err := json.NewDecoder(r.Body).Decode(&postRegisterLineNotifyRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.AddLineNotifyClient(r.Context(), accountID, *postRegisterLineNotifyRequest)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// AddWebNotifyClient - Create webpush notify client
func (c *NotifyApiController) AddWebNotifyClient(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	postRegisterWebPushRequest := &PostRegisterWebPushRequest{}
	if err := json.NewDecoder(r.Body).Decode(&postRegisterWebPushRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.AddWebNotifyClient(r.Context(), accountID, *postRegisterWebPushRequest)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// DeleteNotifyClient - Delete notify client
func (c *NotifyApiController) DeleteNotifyClient(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	notifyClientID, err := parseInt32Parameter(params["notifyClientID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.DeleteNotifyClient(r.Context(), accountID, notifyClientID)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// DeleteNotifyCondition - Delete notify condition
func (c *NotifyApiController) DeleteNotifyCondition(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	conditionID, err := parseInt32Parameter(params["conditionID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.DeleteNotifyCondition(r.Context(), conditionID, accountID)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// EditNotifyClient - Edit notify client
func (c *NotifyApiController) EditNotifyClient(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	notifyClientID, err := parseInt32Parameter(params["notifyClientID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	notifyClientStruct := &NotifyClientStruct{}
	if err := json.NewDecoder(r.Body).Decode(&notifyClientStruct); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.EditNotifyClient(r.Context(), accountID, notifyClientID, *notifyClientStruct)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// EditNotifyCondition - Edit notify condition
func (c *NotifyApiController) EditNotifyCondition(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	conditionID, err := parseInt32Parameter(params["conditionID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	notifyConditionStruct := &NotifyConditionStruct{}
	if err := json.NewDecoder(r.Body).Decode(&notifyConditionStruct); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.EditNotifyCondition(r.Context(), conditionID, accountID, *notifyConditionStruct)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetNotifyClient - Get notify client
func (c *NotifyApiController) GetNotifyClient(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	notifyClientID, err := parseInt32Parameter(params["notifyClientID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.GetNotifyClient(r.Context(), accountID, notifyClientID)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetNotifyClients - Get notify clients
func (c *NotifyApiController) GetNotifyClients(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.GetNotifyClients(r.Context(), accountID)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetNotifyCondition - Get notify condition
func (c *NotifyApiController) GetNotifyCondition(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	conditionID, err := parseInt32Parameter(params["conditionID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.GetNotifyCondition(r.Context(), conditionID, accountID)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetNotifyConditions - Get notify conditions
func (c *NotifyApiController) GetNotifyConditions(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	type_ := query.Get("type")
	result, err := c.service.GetNotifyConditions(r.Context(), accountID, type_)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// RegisterNotifyCondition - Register notify condition
func (c *NotifyApiController) RegisterNotifyCondition(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	accountID, err := parseInt32Parameter(params["accountID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	notifyConditionStruct := &NotifyConditionStruct{}
	if err := json.NewDecoder(r.Body).Decode(&notifyConditionStruct); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.RegisterNotifyCondition(r.Context(), accountID, *notifyConditionStruct)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
